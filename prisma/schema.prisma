generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model inventory {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_name String   @db.VarChar(255)
  quantity     Int
  location     String   @db.VarChar(255)
  user_id      String   @db.Uuid
  merchant_id  String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  merchant     merchant @relation(fields: [merchant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model loyalty_program {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  program_name String   @db.VarChar(255)
  start_date   DateTime @db.Date
  end_date     DateTime @db.Date
  user_id      String   @db.Uuid
  merchant_id  String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  merchant     merchant @relation(fields: [merchant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model merchant {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description     String?           @db.VarChar(255)
  name            String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  user_id         String            @db.Uuid
  tenant_id       String            @db.VarChar(255)
  inventory       inventory[]
  loyalty_program loyalty_program[]
  user            user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order           order[]
}

model order {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_number String    @db.VarChar(255)
  order_date   DateTime  @db.Date
  total_amount Int
  user_id      String    @db.Uuid
  merchant_id  String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  merchant     merchant  @relation(fields: [merchant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payment      payment[]
}

model payment {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  payment_date   DateTime @db.Date
  payment_amount Int
  payment_method String   @db.VarChar(255)
  order_id       String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  order          order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  firstName       String?           @db.VarChar(255)
  lastName        String?           @db.VarChar(255)
  roq_user_id     String            @db.VarChar(255)
  tenant_id       String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  inventory       inventory[]
  loyalty_program loyalty_program[]
  merchant        merchant[]
  order           order[]
}
